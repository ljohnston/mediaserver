#!/usr/bin/env python3

import argparse
import glob
import hashlib
import json
import logging
import logging.handlers
import os
import sys

from abc import ABC, abstractmethod

# Needed to allow individual loggers to manage their level.
logging.root.setLevel(logging.NOTSET)

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))
console_handler.setLevel(logging.INFO)

file_handler = logging.handlers.WatchedFileHandler('/var/log/mediaserver/sync_photos.log')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
file_handler.setLevel(logging.WARNING)

logger = logging.getLogger('sync_music')
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# TODO: Real enums?
photo_types = ['historian', 'photosync-app']

#
# All plex photo libraries (i.e. our sync targets) should have the following
# diretory structure:
#
#   <root>
#     <year>
#       <month>
#         <day>
#           ...
#

class MediaserverDB(ABC):

    def __init__(self, database_dir, db):
        self.db_path = os.path.join(database_dir, db)
        if not os.path.exists(self.db_path):
            os.makedirs(self.db_path)

    @abstractmethod
    def get_key(self, photo):
        pass

    @abstractmethod
    def to_dict(self, photo):
        pass

    @abstractmethod
    def from_dict(self, data):
        pass

    # TODO: We need a select method (really just select all), so that we can
    # remove DB records for files that may have been deleted.
    def select_all(self):
        pass

    def read_record(self, photo):
        rec = self.__get_record_path(photo)

        if not os.path.isfile(rec):
            return None

        # TODO: Error handling. Deserializing may fail due to corrupt or
        # incomplete file. In that case we should delete it and return None.
        with open(rec, 'r') as f:
            data = json.load(f)

        return self.from_dict(data)

    def write_record(self, photo):
        rec = self.__get_record_path(photo)

        rec_dir = os.path.dirname(rec)
        if not os.path.exists(rec_dir):
            os.makedirs(rec_dir)

        with open(rec, 'w') as f:
            json.dump(self.to_dict(photo), f)

    def delete_record(self, photo):
        rec = self.__get_record_path(photo)

        # TODO: Delete empty path elements up the tree.

        if os.path.isfile(rec):
            os.remove(rec)

    #
    # "Private" methods.
    #

    def __get_record_path(self, photo):
        hash = self.get_key(photo)
        return os.path.join(self.db_path, hash[-1], hash[-3:-1], hash[:-3])

    def __to_json_str(self, photo, destination_dir):
        return json.dumps(self.to_dict(photo, destination_dir), sort_keys=True)


class PhotoDB(MediaserverDB):

    def __init__(self, database_dir):
        MediaserverDB.__init__(self, database_dir, '.mediaserver_photoDB')

    def get_key(self, photo):
        return photo.digest()

    def to_dict(self, photo):
        data = {}
        data['type'] = photo.type
        data['source_file'] = photo.file
        data['digest'] = photo.digest()
        return data

    def from_dict(self, data):
        return PhotoRecord(
            data['type'],
            data['source_file'],
            data['digest'])

class SyncDB(MediaserverDB):

    def __init__(self, database_dir, destination_dir):
        MediaserverDB.__init__(self, database_dir, '.mediaserver_syncDB')
        self.destination_dir = destination_dir

    def get_key(self, photo):
        return hashlib.md5((photo.digest() + self.destination_dir).encode()).hexdigest()

    def to_dict(self, photo):
        data = {}
        data['type'] = photo.type
        data['source_file'] = photo.file
        data['destination_dir'] = self.destination_dir
        data['digest'] = photo.digest()
        return data

    def from_dict(self, data):
        return SyncRecord(
            data['type'],
            data['source_file'],
            data['destination_dir'],
            data['digest'])


class PhotoRecord:

    def __init__(self, type, source_file, digest):
        self.type = type
        self.source_file = source_file
        self.digest = digest


class SyncRecord:

    def __init__(self, type, source_file, destination_dir, digest):
        self.type = type
        self.source_file = source_file
        self.destination_dir = destination_dir
        self.digest = digest


class Photo(ABC):

    def __init__(self, type, file):
        self.type = type
        self.file = file
        self.__digest = None

    def digest(self):
        if self.__digest == None:
            md5 = hashlib.md5()
            with open(self.file, 'rb') as f:
                while True:
                    data = f.read(32 * 1024)
                    if not data:
                        break
                    md5.update(data)
            self.__digest = md5.hexdigest()
        return self.__digest

    @abstractmethod
    def get_sync_path(self, path):
        pass

#
# Photo subclasses.
#

class HistorianPhoto(Photo):
    # Input filenames: YYYY/MM-<Monthname>/<randomname>.<ext>
    # Note there's no "day" portion to the date we get here, so we'll set them
    # all to "01".

    def __init__(self, file):
        Photo.__init__(self, 'historian', file)

    def get_sync_path(self, source_path):
        photo_relpath = os.path.relpath(self.file, source_path)
        date = (photo_relpath.split('-')[0] + '/01').replace('/', '-')
        filename = photo_relpath.split('/')[-1]
        return os.path.join(date, filename)


class PhotosyncAppPhoto(Photo):
    # Filenames:
    # Usually: YYYY-MM-DD_HH-MM-SS_IMG_<randomname>.<ext>
    # Can be:  YYYY-MM-DD_HH-MM-SS_<randomname>.<ext>
    # Source files are already in <yyyy>/<mm>/<dd> subdirs.

    def __init__(self, file):
        Photo.__init__(self, 'photosync-app', file)

    def get_sync_path(self, source_path):
        photo_relpath = os.path.relpath(self.file, source_path)
        return photo_relpath


# OS X photos app (f.k.a. iPhoto) photo (not currently using)
class PhotosAppPhoto(Photo):
    # Input filenames: Masters/YYYY/MM/DD/<timestamped_subdir>/<randomname>.<ext>

    def __init__(self, file):
        Photo.__init__(self, 'photos-app', file)

    def get_sync_path(self, source_path):
        photo_relpath = os.path.relpath(self.file, source_path)
        date = (photo_relpath.split('/')[1:3]).replace('/', '-')
        filename = photo_relpath.split('/')[-1]
        return os.path.join(date, filename)


# Plex photo sync (which doesn't work) photo (not currently using)
class PlexAppPhoto(Photo):
    # Input filenames: YYYY-MM-DD <randomname>.<ext>

    def __init__(self, file):
        Photo.__init__(self, 'plex-app', file)

    def get_sync_path(self, source_path):
        photo_relpath = os.path.relpath(self.file, source_path)
        return os.path.join(*photo_relpath.split(' '))


def sync_photo(photo, source, destination, sync_db, photo_db):
    sync_record = sync_db.read_record(photo)
    photo_record = photo_db.read_record(photo)

    # No-op if photo has been synced before or it exists in destination.
    if sync_record != None or photo_record != None:
        return

    symlink = os.path.join(destination, photo.get_sync_path(source))
    symlink_directory = os.path.dirname(symlink)

    if not os.path.exists(symlink_directory):
        os.makedirs(symlink_directory)

    if not os.path.exists(symlink):
        os.symlink(os.path.relpath(photo.file, os.path.dirname(symlink)), symlink)

    sync_db.write_record(photo)
    photo_db.write_record(photo)


def sync_photosyncapp_photos(sources, destination):

    for i in (range(len(sources))):
        source = sources[i]

        sync_db = SyncDB(source, destination)
        photo_db = PhotoDB(destination)

        for path in glob.iglob(os.path.join(source, '**/*'), recursive=True):

            # OS X writes '._<filename>' files on Samba shares.
            if os.path.isfile(path) and not path.startswith('._'):
                sync_photo(PhotosyncAppPhoto(path), source, destination, sync_db, photo_db)

    delete_broken_symlinks(destination)
    delete_empty_directories(destination)


def sync_photos(args):
    sources = args.sources.split(',')

    if args.type == 'historian':
        return sync_historian_photos(sources, args.destination)

    elif args.type == 'photosync-app':
        return sync_photosyncapp_photos(sources, args.destination)


def find_broken_symlinks(path):
    broken = []
    for root, dirs, files in os.walk(path):
        for filename in files:
            path = os.path.join(root,filename)

            if os.path.islink(path):
                target_path = os.readlink(path)

                if not os.path.isabs(target_path):
                    target_path = os.path.join(os.path.dirname(path),target_path)
                if not os.path.exists(target_path):
                    broken.append(path)

    return broken


def delete_broken_symlinks(path):
    for broken_link in find_broken_symlinks(path):
        os.unlink(broken_link)


def delete_empty_directories(path):
    empty_dirs = []

    for root, dirs, files in os.walk(path):
        # Don't delete the root dir.
        if root == path:
            continue
        if not files:
            empty_dirs.append(root)

    for dir in reversed(empty_dirs):
        if not os.listdir(dir):
            os.rmdir(dir)


def main():
    parser = argparse.ArgumentParser(description='Mediaserver photo mangement utility')

    parser.add_argument(
        '-t',
        '--type',
        metavar='type',
        choices=photo_types,
        required=True,
        help='Media source library type.')
    parser.add_argument(
        '-s',
        '--sources',
        required=True,
        help='Path(s) to the source media. Delimit multiple with a comma.')
    parser.add_argument(
        '-d',
        '--destination',
        required=True,
        help='Path to the media sync destination.')
    parser.add_argument(
        '-n',
        '--not-in-destination',
        required=False,
        help='Only sync if photo does not exist in the destination.')
    parser.add_argument(
        '-f',
        '--flag-file',
        required=False,
        help='Only sync if this file exists.')

    args = parser.parse_args()

    rtn = sync_photos(args)

    return rtn


if __name__ == '__main__':
    try:
        sys.exit(main())
    except Exception:
        logging.exception('uncaught exception:')
        sys.exit(1)
