#!/usr/bin/env python3

import argparse
import glob
import logging
import logging.handlers
import os
import pathlib
import subprocess
import sys

# Needed to allow individual loggers to manage their level.
logging.root.setLevel(logging.NOTSET)

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(levelname)s - %(message)s'))
console_handler.setLevel(logging.INFO)

file_handler = logging.handlers.WatchedFileHandler('/var/log/mediaserver/normalize.log')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
file_handler.setLevel(logging.INFO)

logger = logging.getLogger('normalize')
logger.addHandler(console_handler)
logger.addHandler(file_handler)

def normalize_it(sourcefile, destfile):
    if not os.path.exists(destfile):
        return True

    real_sourcefile = pathlib.Path(sourcefile).resolve()

    if os.stat(real_sourcefile).st_mtime > os.stat(destfile).st_mtime:
        return True

    return False

def normalize(args):
    sources = args.sources.split(',')
    destination = args.destination

    returncode = 0

    for i in (range(len(sources))):
        source = sources[i]

        if not os.path.exists(source):
            logger.warning("source folder '{}' not found - nothing to normalize".format(source))

        for sourcefile in glob.iglob(os.path.join(source, '**/*.m4a'), recursive=True):
            destfile = os.path.join(destination, os.path.relpath(sourcefile, source))
            destfile_dir = os.path.dirname(destfile)

            if not os.path.exists(destfile_dir):
                os.makedirs(destfile_dir)

            destfile = os.path.splitext(destfile)[0]+'.m4a'

            # if not os.path.exists(destfile):
            if normalize_it(sourcefile, destfile):
                cmd = ['ffmpeg-normalize', sourcefile,
                       '-o', destfile,
                       '-c:a', 'aac',
                       '-ar', '48000',
                       '-vn',
                       '--force']

                logger.info(" ".join(cmd))

                p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
                p.communicate()

                if p.returncode != 0:
                    returncode = 1
                    for line in iter(p.stdout.readline, ''):
                        logger.error(line.rstrip())

    return returncode

def cleanup(args):
    sources = args.sources.split(',')
    destination = args.destination

    if not os.path.exists(destination):
        return

    for destfile in glob.iglob(os.path.join(destination, '**/*.m4a'), recursive=True):

        for i in (range(len(sources))):
            source = sources[i]
            sourcefile = os.path.join(source, os.path.relpath(destfile, destination))

            if not os.path.exists(sourcefile):
                logger.info("deleting '{}' as source file no longer exists".format(destfile))
                os.remove(destfile)

def main():
    parser = argparse.ArgumentParser(description='Mediaserver audio normalizer')

    parser.add_argument(
        '-s',
        '--sources',
        required=True,
        help='Path(s) to the source media. Delimit multiple with a comma.')
    parser.add_argument(
        '-d',
        '--destination',
        required=True,
        help='Path to the normalization destination.')

    args = parser.parse_args()

    returncode = normalize(args)
    cleanup(args)

    sys.exit(returncode)


if __name__ == '__main__':
    try:
        sys.exit(main())
    except Exception:
        logging.exception('caught exception:')
        sys.exit(1)
